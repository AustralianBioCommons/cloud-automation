clusterName: ${cluster_name}
s3URI: s3://${s3_bucket}/${cluster_name}
amiId: "ami-9e2685e3"
keyName: ${key_name}
sshAuthorizedKeys:
  -   
region: ${aws_region}
kmsKeyArn: "${kms_key}"
apiEndpoints:
- # The unique name of this API endpoint used to identify it inside CloudFormation stacks or
  name: ${cluster_name}
  dnsName: k8s-${cluster_name}.internal.io
  loadBalancer:
    subnets:
      - name: private
    private: true
    hostedZone:
      id: ${hosted_zone}
      
controller:
  # Maximum time to wait for controller creation
  createTimeout: PT30M
  autoScalingGroup:
    minSize: 1
    maxSize: 3
    rollingUpdateMinInstancesInService: 2
  subnets:
    - name: private
  iam:
    role:
      name: "${cluster_name}-controller"
      managedPolicies:
        - arn: "${log_bucket_policy}"

etcd:
  # Maximum time to wait for controller creation
  createTimeout: PT30M
  count: 3
  dataVolume:
    encrypted: true
  subnets:
  - name: private
  memberIdentityProvider: eni
vpc:
  id: ${vpc_id}
  routeTableId: ${route_table_id}
worker:
  nodePools:
    - # Name of this node pool. Must be unique among all the node pools in this cluster
      name: nodepool
      createTimeout: PT30M
      autoScalingGroup:
        minSize: 1
        maxSize: 4
      autoscaling:
        clusterAutoscaler:
          enabled: true
      subnets:
        - name: private
      iam:
        role:
          name: "${cluster_name}-worker"
          managedPolicies:
            - arn: "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
            - arn: "${config_bucket_policy}"

kubeDns:
  autoscaler:
    coresPerReplica: 256
    nodesPerReplica: 16
    min: 2
kubeProxy:
  ipvsMode:
    enabled: false
    scheduler: rr
    syncPeriod: 300s
    minSyncPeriod: 60s
kubernetesDashboard:
  adminPrivileges: true
  insecureLogin: false
addons:
  clusterAutoscaler:
    enabled: true
  rescheduler:
    enabled: false
  metricsServer:
    enabled: false
useCalico: true
kubelet:
  RotateCerts:
    enabled: false
experimental:
  admission:
    podSecurityPolicy:
      enabled: false
    alwaysPullImages:
      enabled: false
    denyEscalatingExec:
      enabled: false
    initializers:
      enabled: false
    priority:
      enabled: false
    mutatingAdmissionWebhook:
      enabled: false
    validatingAdmissionWebhook:
      enabled: false
    OwnerReferencesPermissionEnforcement:
      enabled: false
#  awsEnvironment:
#    enabled: false
#    environment:
#      CFNSTACK: '{ "Ref" : "AWS::StackId" }'
  auditLog:
    enabled: true
    maxage: 30
    logpath: /dev/stdout
  authentication:
    webhook:
      enabled: false
      cacheTTL: 1m0s
      configBase64: base64-encoded-webhook-yaml
  awsNodeLabels:
    enabled: false
  tlsBootstrap:
    enabled: false
  nodeAuthorizer:
    enabled: false
  ephemeralImageStorage:
    enabled: false
  kube2IamSupport:
    enabled: false
  nodeDrainer:
    enabled: true
    drainTimeout: 5
  oidc:
    enabled: false
    issuerUrl: "https://accounts.google.com"
    clientId: "kubernetes"
    usernameClaim: "email"
    groupsClaim: "groups"
  disableSecurityGroupIngress: false
subnets:
  - name: private
    id: "${subnet_id}"
    #private: true
    availabilityZone: "${subnet_zone}"
    instanceCIDR: "${subnet_cidr}"
    securityGroupIds:
    mapPublicIPs: false
stackTags:
  Environment: ${cluster_name}
  Organization: "Basic Service"
